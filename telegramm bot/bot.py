import os
import logging
import requests
import base64
import json
import io
from datetime import datetime
import telebot
from telebot import types
import mimetypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not OPENROUTER_API_KEY:
    logger.error("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_NAME = "google/gemini-2.0-flash-exp:free"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
SUPPORTED_DOCUMENT_TYPES = [
    'text/plain', 'application/pdf', 'application/json',
    'text/csv', 'application/msword', 'text/html'
]

class GeminiBot:
    def __init__(self):
        self.user_contexts = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.max_context_length = 10  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        
    def get_user_context(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = []
        return self.user_contexts[user_id]
    
    def add_to_context(self, user_id, role, content):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = self.get_user_context(user_id)
        context.append({"role": role, "content": content})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(context) > self.max_context_length * 2:  # *2 –ø–æ—Ç–æ–º—É —á—Ç–æ user + assistant
            context.pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    def clear_context(self, user_id):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_contexts:
            self.user_contexts[user_id] = []
    
    def encode_file_to_base64(self, file_content, mime_type):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API"""
        try:
            encoded_content = base64.b64encode(file_content).decode('utf-8')
            return f"data:{mime_type};base64,{encoded_content}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def prepare_message_content(self, text=None, file_data=None, mime_type=None):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Gemini"""
        content = []
        
        if text:
            content.append({
                "type": "text",
                "text": text
            })
        
        if file_data and mime_type:
            if mime_type.startswith('image/'):
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                encoded_file = self.encode_file_to_base64(file_data, mime_type)
                if encoded_file:
                    content.append({
                        "type": "image_url",
                        "image_url": {
                            "url": encoded_file
                        }
                    })
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    if mime_type == 'application/pdf':
                        text_content = f"[PDF —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –†–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç]"
                    else:
                        text_content = file_data.decode('utf-8', errors='ignore')
                    
                    content.append({
                        "type": "text", 
                        "text": f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ({mime_type}):\n\n{text_content[:4000]}..."  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    })
                except Exception as e:
                    content.append({
                        "type": "text",
                        "text": f"[–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {str(e)}]"
                    })
        
        return content if content else [{"type": "text", "text": text or "–ü—Ä–∏–≤–µ—Ç!"}]
    
    def call_gemini_api(self, user_id, text=None, file_data=None, mime_type=None):
        """–í—ã–∑–æ–≤ API Gemini —á–µ—Ä–µ–∑ OpenRouter"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self.get_user_context(user_id)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_content = self.prepare_message_content(text, file_data, mime_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = context.copy()
            messages.append({
                "role": "user",
                "content": message_content
            })
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "X-Title": "Telegram Gemini Bot",
                "HTTP-Referer": "https://github.com/your-repo",
                "X-Title": "Gemini Telegram Bot"
            }
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            payload = {
                "model": MODEL_NAME,
                "messages": messages,
                "max_tokens": 4096,
                "temperature": 0.7,
                "stream": False
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                OPENROUTER_API_URL,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                self.add_to_context(user_id, "user", message_content)
                self.add_to_context(user_id, "assistant", ai_response)
                
                return ai_response
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API OpenRouter: {response.status_code} - {response.text}")
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}"
                
        except requests.exceptions.Timeout:
            return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        except requests.exceptions.ConnectionError:
            return "üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
gemini_bot = GeminiBot()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_handler(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini 2.5-flash Bot!**

–Ø –º–æ–≥—É:
‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
‚Ä¢ üìÑ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ (PDF, TXT, JSON –∏ –¥—Ä.)
‚Ä¢ üß† –í–µ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/help - –ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª! üöÄ
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìö –ü–æ–º–æ—â—å", callback_data="help"),
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear")
    )
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(commands=['clear'])
def clear_handler(message):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    gemini_bot.clear_context(user_id)
    
    bot.send_message(
        message.chat.id,
        "üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(commands=['help'])
def help_handler(message):
    """–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

**üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ (–±–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç)
‚Ä¢ –ü—Ä–æ—Å–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, —Å—Ç–∏—Ö–∏, —Ä–∞—Å—Å–∫–∞–∑—ã

**üñºÔ∏è –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ + –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–º
‚Ä¢ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —Å—Ö–µ–º—É

**üìÑ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**
‚Ä¢ PDF - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ TXT - –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ  
‚Ä¢ JSON - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ CSV - —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ?"
‚Ä¢ "–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–æ–¥ –≤ —Ñ–∞–π–ª–µ"
‚Ä¢ "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø–æ —ç—Ç–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É"

**‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    """
    
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def status_handler(message):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        test_response = gemini_bot.call_gemini_api(
            message.from_user.id, 
            "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?"
        )
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

‚úÖ Telegram Bot: –†–∞–±–æ—Ç–∞–µ—Ç  
‚úÖ OpenRouter API: –†–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Gemini 2.5-flash: –î–æ—Å—Ç—É–ø–µ–Ω

üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(gemini_bot.get_user_context(message.from_user.id))} —Å–æ–æ–±—â–µ–Ω–∏–π

**–¢–µ—Å—Ç API:** {test_response[:100]}...
        """
        
        bot.send_message(message.chat.id, status_text, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
    if call.data == "help":
        help_handler(call.message)
    elif call.data == "clear":
        user_id = call.from_user.id
        gemini_bot.clear_context(user_id)
        bot.answer_callback_query(call.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
        bot.edit_message_text(
            "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
            call.message.chat.id,
            call.message.message_id
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_info = bot.get_file(message.photo[-1].file_id)  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_data = bot.download_file(file_info.file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        caption = message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        mime_type = 'image/jpeg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Telegram —Ñ–æ—Ç–æ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ Gemini
        response = gemini_bot.call_gemini_api(
            message.from_user.id,
            caption,
            file_data,
            mime_type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(response) > 4096:
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
        else:
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(content_types=['document'])
def document_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = bot.get_file(message.document.file_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram API - 20MB)
        if file_info.file_size > 20 * 1024 * 1024:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        mime_type = message.document.mime_type or mimetypes.guess_type(message.document.file_name)[0]
        
        if not mime_type:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞
        if mime_type not in SUPPORTED_DOCUMENT_TYPES and not mime_type.startswith('text/'):
            supported_types = ", ".join(SUPPORTED_DOCUMENT_TYPES)
            bot.send_message(
                message.chat.id,
                f"‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n{supported_types}",
                parse_mode='Markdown'
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_data = bot.download_file(file_info.file_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        caption = message.caption or f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {message.document.file_name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ Gemini
        response = gemini_bot.call_gemini_api(
            message.from_user.id,
            caption,
            file_data,
            mime_type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if len(response) > 4096:
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
        else:
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π  
@bot.message_handler(content_types=['voice'])
def voice_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(
        message.chat.id,
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ Gemini
        response = gemini_bot.call_gemini_api(message.from_user.id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
        if len(response) > 4096:
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
        else:
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@bot.middleware_handler(update_types=['message'])
def modify_message(bot_instance, message):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = message.from_user
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {message.content_type}")

def send_startup_notification():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    if ADMIN_CHAT_ID:
        try:
            startup_message = f"""
üöÄ **Gemini Bot –∑–∞–ø—É—â–µ–Ω!**

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ –ú–æ–¥–µ–ª—å: {MODEL_NAME}
‚òÅÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Railway.app
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
            """
            bot.send_message(ADMIN_CHAT_ID, startup_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Gemini Telegram Bot...")
    logger.info(f"üîó –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    send_startup_notification()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True, interval=1, timeout=60)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()